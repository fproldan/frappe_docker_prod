version: "3.8"

x-default-networks: &default-networks
  networks:
    - network

x-default-config: &default-config
  <<: *default-networks
  environment:
    - DB_HOST=${DOCKER_NAME_PREFIX}_db
    - REDIS_CACHE_HOST=${DOCKER_NAME_PREFIX}_redis_cache:6379
    - REDIS_QUEUE_HOST=${DOCKER_NAME_PREFIX}_redis_queue:6379
    - REDIS_SOCKETIO_HOST=${DOCKER_NAME_PREFIX}_redis_socketio:6379
  env_file:
    - .env
  volumes:
    - logs:/home/frappe/frappe-bench/logs
    - sites:/home/frappe/frappe-bench/sites
    - apps:/home/frappe/frappe-bench/apps
  restart: unless-stopped

x-build: &default-build
  context: .

x-server-and-redis-dependents: &server-and-redis-dependents
  <<: *default-config
  depends_on:
    server:
      condition: service_healthy
    redis-cache:
      condition: service_healthy
    redis-socketio:
      condition: service_healthy
    redis-queue:
      condition: service_healthy

x-default-redis: &default-redis
  <<: *default-networks
  image: "redis:alpine"
  healthcheck:
    test: redis-cli ping
    interval: 1s
    retries: 10
  restart: unless-stopped

services:
  reverse_proxy:
    <<: *default-config
    container_name: ${DOCKER_NAME_PREFIX}_reverse_proxy
    build:
      <<: *default-build
      target: reverse_proxy
    ports:
      - "${DOCKER_REVERSE_PROXY_SERVICE_PORT}:8080"
    depends_on:
      server:
        condition: service_healthy
      scheduler:
        condition: service_started
      websocket:
        condition: service_started
      queue-default:
        condition: service_started
      queue-short:
        condition: service_started
      queue-long:
        condition: service_started

  server:
    <<: *default-config
    container_name: ${DOCKER_NAME_PREFIX}_server
    build:
      <<: *default-build
      target: server
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-d", "/home/frappe/frappe-bench/sites/$SITE_NAME"]
      interval: 10s
      retries: 30

  db:
    <<: *default-networks
    image: "mariadb:10.6"
    container_name: ${DOCKER_NAME_PREFIX}_db
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--skip-character-set-client-handshake"
      - "--skip-innodb-read-only-compressed"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_USER=${DB_USER}
    volumes:
      - db_vol:/var/lib/mysql
    ports:
      - ${DOCKER_DB_SERVICE_PORT}:3306
    healthcheck:
      test: mysqladmin ping -h localhost --password=${DB_ROOT_PASSWORD}
      interval: 1s
      retries: 10
    restart: unless-stopped

  scheduler:
    <<: *server-and-redis-dependents
    container_name: ${DOCKER_NAME_PREFIX}_scheduler
    build:
      <<: *default-build
      target: scheduler

  websocket:
    <<: *server-and-redis-dependents
    container_name: ${DOCKER_NAME_PREFIX}_websocket
    build:
      <<: *default-build
      target: websocket

  queue-default:
    <<: *server-and-redis-dependents
    container_name: ${DOCKER_NAME_PREFIX}_queue_default
    build:
      <<: *default-build
      target: queue-default

  queue-short:
    <<: *server-and-redis-dependents
    container_name: ${DOCKER_NAME_PREFIX}_queue_short
    build:
      <<: *default-build
      target: queue-short

  queue-long:
    <<: *server-and-redis-dependents
    container_name: ${DOCKER_NAME_PREFIX}_queue_long
    build:
      <<: *default-build
      target: queue-long

  redis-cache:
    <<: *default-redis
    container_name: ${DOCKER_NAME_PREFIX}_redis_cache

  redis-socketio:
    <<: *default-redis
    container_name: ${DOCKER_NAME_PREFIX}_redis_socketio

  redis-queue:
    <<: *default-redis
    container_name: ${DOCKER_NAME_PREFIX}_redis_queue

volumes:
  db_vol:
    name: ${DOCKER_NAME_PREFIX}_db_vol
  sites:
    name: ${DOCKER_NAME_PREFIX}_sites
  logs:
    name: ${DOCKER_NAME_PREFIX}_logs
  apps:
    name: ${DOCKER_NAME_PREFIX}_apps

networks:
  network: null
